{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\ud83d\udc4f\u6765\u5230Zzz\u7684\u7b97\u6cd5Github.io # \u4e3b\u8981\u6a21\u5757\u6709\uff1a POJ \u9898\u76ee\u89e3\u6cd5 Leetcode \u9898\u76ee\u89e3\u6cd5 \u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","title":"Home"},{"location":"#zzzgithubio","text":"\u4e3b\u8981\u6a21\u5757\u6709\uff1a POJ \u9898\u76ee\u89e3\u6cd5 Leetcode \u9898\u76ee\u89e3\u6cd5 \u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","title":"\u6b22\u8fce\ud83d\udc4f\u6765\u5230Zzz\u7684\u7b97\u6cd5Github.io"},{"location":"Algorithm/DP/","text":"","title":"DP"},{"location":"Algorithm/Greedy/","text":"","title":"Greedy"},{"location":"Algorithm/SegmentTree/","text":"","title":"Segment Tree"},{"location":"Algorithm/UnionFind/","text":"Union Find # \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u72b6\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u4e3b\u8981\u652f\u6301\u7684\u64cd\u4f5c\u662f\uff1a \u67e5\u627e\uff08Find\uff09\uff1a\u67e5\u770b\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408 \u5408\u5e76\uff08Union\uff09\uff1a\u5c06\u4e24\u4e2a\u5b50\u96c6\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408 \u521d\u59cb\u5316 # \u521d\u59cb\u5316\u65f6\uff0c\u6240\u6709\u5143\u7d20\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u4ed6\u7684\u7236\u8282\u70b9\u6307\u5411\u4ed6\u81ea\u5df1 vector < int > parent ( n ); for ( int i = 0 ; i < n ; i ++ ) parent [ i ] = i ; \u67e5\u627e # \u67e5\u627e\uff0c\u5373\u4e3a\u67e5\u627e\u5f53\u524d\u5143\u7d20\u6240\u5904\u5728\u96c6\u5408\u7684\u7956\u5148\u8282\u70b9\u3002 \u975e\u8def\u5f84\u538b\u7f29\u7248\uff1a int find ( int i , vector < int >& parent ) { if ( parent [ i ] == i ) return i ; return find ( parent [ i ]); } \u8def\u5f84\u538b\u7f29\u7248\uff1a int find ( int i , vector < int >& parent ) { if ( parent [ i ] == i ) return i ; return parent [ i ] = find ( parent [ i ]); } \u5907\u6ce8\uff1a\u8def\u5f84\u538b\u7f29\u5728\u5b9e\u73b0\u65f6\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u901a\u8fc7\u538b\u7f29\u8def\u5f84\u4e4b\u540e\u6211\u4eec\u5f53\u524d\u5143\u7d20\u5230\u7956\u5148\u8282\u70b9\u7684\u8ddd\u79bb\u4e3a1\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u4f1a\u5f62\u6210\u4e00\u4e2a\u6df1\u5ea6\u975e\u5e38\u6df1\u7684\u6811\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u67e5\u627e\u65f6\u95f4\u975e\u5e38\u957f\u3002 \u5408\u5e76 # \u5c06\u4e24\u4e2a\u96c6\u5408\u8fdb\u884c\u5408\u5e76 \u6b63\u5e38\u7248\u672c\uff1a void union ( int x , int y , vector < int >& parent ) { int px = find ( x , parent ); int py = find ( y , parent ); parent [ px ] = py ; return ; } \u542f\u53d1\u5f0f\uff08\u5e26size\u7684\uff09 vector < int > size ( n , 1 ); vector < int > parent ( n , 1 ); void union ( int x , int y ) { int px = find ( x , parent ); int py = find ( y , parent ); if ( size [ px ] > py ) // \u4fdd\u8bc1\u5c0f\u96c6\u5408\u5408\u5e76\u5230\u5927\u96c6\u5408 swap ( px , py ); parent [ px ] = py ; size [ py ] += size [ px ]; return ; } \u5408\u5e76\u65f6\u65f6\u95f4\u590d\u6742\u5ea6 # \u8bc1\u660e\u94fe\u63a5\u5728 \u8bc1\u660e\u94fe\u63a5 POJ \u76f8\u5173\u9898\u76ee # 1182 Food Chain\uff0c http://poj.org/problem?id=1182 1611 The Suspects\uff0c http://poj.org/problem?id=1611 \uff0c \u9898\u89e3 2236 Wireless Work\uff0c http://poj.org/problem?id=2236 \uff0c \u9898\u89e3","title":"Union Find"},{"location":"Algorithm/UnionFind/#union-find","text":"\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u6811\u72b6\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u4e3b\u8981\u652f\u6301\u7684\u64cd\u4f5c\u662f\uff1a \u67e5\u627e\uff08Find\uff09\uff1a\u67e5\u770b\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408 \u5408\u5e76\uff08Union\uff09\uff1a\u5c06\u4e24\u4e2a\u5b50\u96c6\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408","title":"Union Find"},{"location":"Algorithm/UnionFind/#_1","text":"\u521d\u59cb\u5316\u65f6\uff0c\u6240\u6709\u5143\u7d20\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u4ed6\u7684\u7236\u8282\u70b9\u6307\u5411\u4ed6\u81ea\u5df1 vector < int > parent ( n ); for ( int i = 0 ; i < n ; i ++ ) parent [ i ] = i ;","title":"\u521d\u59cb\u5316"},{"location":"Algorithm/UnionFind/#_2","text":"\u67e5\u627e\uff0c\u5373\u4e3a\u67e5\u627e\u5f53\u524d\u5143\u7d20\u6240\u5904\u5728\u96c6\u5408\u7684\u7956\u5148\u8282\u70b9\u3002 \u975e\u8def\u5f84\u538b\u7f29\u7248\uff1a int find ( int i , vector < int >& parent ) { if ( parent [ i ] == i ) return i ; return find ( parent [ i ]); } \u8def\u5f84\u538b\u7f29\u7248\uff1a int find ( int i , vector < int >& parent ) { if ( parent [ i ] == i ) return i ; return parent [ i ] = find ( parent [ i ]); } \u5907\u6ce8\uff1a\u8def\u5f84\u538b\u7f29\u5728\u5b9e\u73b0\u65f6\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u901a\u8fc7\u538b\u7f29\u8def\u5f84\u4e4b\u540e\u6211\u4eec\u5f53\u524d\u5143\u7d20\u5230\u7956\u5148\u8282\u70b9\u7684\u8ddd\u79bb\u4e3a1\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u4f1a\u5f62\u6210\u4e00\u4e2a\u6df1\u5ea6\u975e\u5e38\u6df1\u7684\u6811\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u67e5\u627e\u65f6\u95f4\u975e\u5e38\u957f\u3002","title":"\u67e5\u627e"},{"location":"Algorithm/UnionFind/#_3","text":"\u5c06\u4e24\u4e2a\u96c6\u5408\u8fdb\u884c\u5408\u5e76 \u6b63\u5e38\u7248\u672c\uff1a void union ( int x , int y , vector < int >& parent ) { int px = find ( x , parent ); int py = find ( y , parent ); parent [ px ] = py ; return ; } \u542f\u53d1\u5f0f\uff08\u5e26size\u7684\uff09 vector < int > size ( n , 1 ); vector < int > parent ( n , 1 ); void union ( int x , int y ) { int px = find ( x , parent ); int py = find ( y , parent ); if ( size [ px ] > py ) // \u4fdd\u8bc1\u5c0f\u96c6\u5408\u5408\u5e76\u5230\u5927\u96c6\u5408 swap ( px , py ); parent [ px ] = py ; size [ py ] += size [ px ]; return ; }","title":"\u5408\u5e76"},{"location":"Algorithm/UnionFind/#_4","text":"\u8bc1\u660e\u94fe\u63a5\u5728 \u8bc1\u660e\u94fe\u63a5","title":"\u5408\u5e76\u65f6\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"Algorithm/UnionFind/#poj","text":"1182 Food Chain\uff0c http://poj.org/problem?id=1182 1611 The Suspects\uff0c http://poj.org/problem?id=1611 \uff0c \u9898\u89e3 2236 Wireless Work\uff0c http://poj.org/problem?id=2236 \uff0c \u9898\u89e3","title":"POJ \u76f8\u5173\u9898\u76ee"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/","text":"\u80cc\u5305\uff08KnapSack\uff09DP # \u8fd9\u4e00\u7ae0\u8282\u8bb0\u5f55\u80cc\u5305dp\u4ee5\u53ca\u5404\u79cd\u53d8\u79cd\u7c7b\u578b\u7684\u89e3\u6cd5\u548c\u6280\u5de7 \u95ee\u9898\u63cf\u8ff0 # \u6709 n n \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a W W \u7684\u80cc\u5305\uff0c\u7b2c i i \u4e2a\u7269\u54c1\u7684\u5bb9\u91cf\u548c\u4ef7\u503c\u4e3a w_i,v_i w_i,v_i \uff0c\u8981\u6c42\u9009\u53d6\u7684\u5bb9\u91cf\u603b\u6570\u4e0d\u5927\u4e8e\u80cc\u5305\u5bb9\u91cf\u4e14\u4ef7\u503c\u603b\u6570\u6700\u5927\u3002\u6839\u636e\u9009\u53d6\u7b2c i i \u4e2a\u7269\u54c1\u7684\u6b21\u6570\u4ee5\u53ca\u5404\u79cd\u7ea6\u675f\uff0c\u80cc\u5305\u95ee\u9898\u4f1a\u88ab\u7ec6\u5206\u4e3a 0-1 \u80cc\u5305\u3001\u5b8c\u5168\u80cc\u5305\u7b49\u3002 0-1\u80cc\u5305 # \u6bcf\u79cd\u7269\u54c1\u53ea\u80fd\u9009\u53d6\u4e00\u6b21\u6216\u8005\u4e0d\u9009\u53d6\u3002 DP DP \u72b6\u6001 \uff1a f_{i,j} f_{i,j} \u8868\u793a\u53ea\u9009\u53d6\u524d i i \u4e2a\u7269\u54c1\uff0c\u5bb9\u91cf\u4e3a j j \u7684\u80cc\u5305\uff0c\u6700\u591a\u80fd\u591f\u5230\u8fbe\u7684\u4ef7\u503c \u8f6c\u79fb\u65b9\u7a0b \uff1a \u903b\u8f91\uff1a\u5982\u679c\u6211\u4eec\u5f53\u524d\u5b8c\u6210\u4e86\u524d i-1 i-1 \u4e2a\u7269\u54c1\u7684\u9009\u53d6\u60c5\u51b5\uff0c\u90a3\u4e48\u5f00\u59cb\u8003\u8651\u7b2c i i \u4e2a\u3002\u7b2c i i \u4e2a\u7269\u54c1\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u8981\u4e48\u9009\u53d6\uff0c\u8981\u4e48\u4e0d\u9009\u53d6\u3002 \u5bf9\u4e8e\u4e0d\u9009\u53d6\u7684\u60c5\u51b5\uff0c f_{i,j}=f_{i-1,j} f_{i,j}=f_{i-1,j} \u5bf9\u4e8e\u9009\u53d6\u7b2c i i \u4e2a\u7269\u54c1\u7684\u60c5\u51b5\uff0c f_{i,j}=f_{i-1,j-w_i}+v_i f_{i,j}=f_{i-1,j-w_i}+v_i \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e24\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u8981\u53d6\u6700\u5927\uff0c\u4e8e\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a f_{i,j} = \\max(f_{i-1,j},f_{i-1,j-w_i}+v_i) \u8fb9\u754c\u6761\u4ef6 \uff1a 0-1\u80cc\u5305\u95ee\u9898\uff0c\u4e0d\u9700\u8981\u7279\u522b\u8bbe\u5b9a\u8fb9\u754c\uff0c\u521d\u59cb\u5316\u65f6\uff0c\u5c06\u6240\u6709 f_j f_j \u8bbe\u4e3a 0 0 \u6216\u8005\u8d1f\u6570\u5373\u53ef \u7a7a\u95f4\u4f18\u5316 \uff1a \u6211\u4eec\u91c7\u53d6\u4e86\u4e8c\u7ef4\u6570\u7ec4\u6765\u5b58\u50a8\u72b6\u6001 f_{i,j} f_{i,j} \uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5728\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684 f_{i,j} f_{i,j} \u53ea\u548c f_{i-1,?} f_{i-1,?} \u6709\u5173\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u6301\u67d0\u4e2a\u987a\u5e8f\u66f4\u65b0\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5373\u53ef\u3002 f_j=\\max(f_j,f_{j-w_i}+v_i) \u6a21\u7248\u4ee3\u7801 \uff1a for ( int i = 0 ; i < n ; i ++ ) for ( int j = W ; j = w [ i ]; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); \u6ce8\u610f\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u80cc\u5305\u5bb9\u91cf\u7684\u5faa\u73af\u65b9\u5411\u662f\u4ece\u9ad8\u5bb9\u91cf\u5230\u4f4e\u5bb9\u91cf\u3002\u539f\u56e0\u662f\u5f53\u679a\u4e3e\u5bb9\u91cf j j \u7684\u65f6\u5019\uff0c\u6bd4\u65b9\u8bf4\uff0c\u6211\u4eec\u5728 f_{i,2w_i} f_{i,2w_i} \u7684\u65f6\u5019\uff0c\u66f4\u65b0\u4f7f\u7528\u4e86\u7b2c i i \u4e2a\u7269\u54c1\uff0c\u90a3\u4e48\u5bf9\u4e8e 0-1 \u80cc\u5305\uff0c\u5e94\u8be5\u4e0d\u80fd\u4f7f\u7528\u4e86\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u88ab\u4e8c\u6b21\u9009\u53d6\uff0c\u8fdd\u80cc\u4e86\u89c4\u5219\u3002 \u5b8c\u5168\u80cc\u5305 # \u6bcf\u79cd\u7269\u54c1\u80fd\u591f\u9009\u53d6\u65e0\u9650\u591a\u6b21\u3002 DP\u72b6\u6001\u3001\u8f6c\u79fb\u65b9\u7a0b\u3001\u8fb9\u754c\u6761\u4ef6\u4e0e 0-1 \u65b9\u7a0b\u5b8c\u5168\u4e00\u81f4\uff0c\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u66f4\u65b0\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4f4e\u5bb9\u91cf\u5230\u9ad8\u5bb9\u91cf\u66f4\u65b0\uff0c\u8fd9\u6837\u6bcf\u6b21\u5c31\u76f8\u5f53\u4e8e\u65e0\u9650\u6b21\u6570\u9009\u53d6\u7b2c i i \u7c7b\u7269\u54c1\u3002 \u6a21\u677f\u4ee3\u7801 \uff1a for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j = W - w [ i ]; j -- ) f [ j + w [ i ]] = max ( f [ j + w [ i ]], f [ j ] + v [ i ]); \u591a\u91cd\u80cc\u5305 # \u7b2c i i \u79cd\u7269\u54c1\u53ea\u80fd\u6700\u591a\u9009\u53d6 k_i k_i \u6b21 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_{i,j} =\\max_{k=0}^{k_i} (f_{i-1,j-k\\times w_i}+v_i\\times k) POJ \u76f8\u5173\u9898\u76ee # 0-1 \u80cc\u5305 # 3624 Charm Bracelet\uff0c http://poj.org/problem?id=3624 \uff0c 3624 Charm Bracelet \u89e3\u6cd5 \u5b8c\u5168\u80cc\u5305 # 1384 Piggy Bank\uff0c http://poj.org/problem?id=1384 \uff0c 1384 Piggy Bank 2064 Investment\uff0c http://poj.org/problem?id=2063 \uff0c 2063 Investment 2229 Sumsets\uff0c http://poj.org/problem?id=2229 \uff0c 2229 Sumsets \u89e3\u6cd5 3181 Dollar Dayz\uff0c http://poj.org/problem?id=3181 \uff0c 3181 Dollar Dayz \u89e3\u6cd5","title":"KnapSack Programming"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#knapsackdp","text":"\u8fd9\u4e00\u7ae0\u8282\u8bb0\u5f55\u80cc\u5305dp\u4ee5\u53ca\u5404\u79cd\u53d8\u79cd\u7c7b\u578b\u7684\u89e3\u6cd5\u548c\u6280\u5de7","title":"\u80cc\u5305\uff08KnapSack\uff09DP"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#_1","text":"\u6709 n n \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a W W \u7684\u80cc\u5305\uff0c\u7b2c i i \u4e2a\u7269\u54c1\u7684\u5bb9\u91cf\u548c\u4ef7\u503c\u4e3a w_i,v_i w_i,v_i \uff0c\u8981\u6c42\u9009\u53d6\u7684\u5bb9\u91cf\u603b\u6570\u4e0d\u5927\u4e8e\u80cc\u5305\u5bb9\u91cf\u4e14\u4ef7\u503c\u603b\u6570\u6700\u5927\u3002\u6839\u636e\u9009\u53d6\u7b2c i i \u4e2a\u7269\u54c1\u7684\u6b21\u6570\u4ee5\u53ca\u5404\u79cd\u7ea6\u675f\uff0c\u80cc\u5305\u95ee\u9898\u4f1a\u88ab\u7ec6\u5206\u4e3a 0-1 \u80cc\u5305\u3001\u5b8c\u5168\u80cc\u5305\u7b49\u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#0-1","text":"\u6bcf\u79cd\u7269\u54c1\u53ea\u80fd\u9009\u53d6\u4e00\u6b21\u6216\u8005\u4e0d\u9009\u53d6\u3002 DP DP \u72b6\u6001 \uff1a f_{i,j} f_{i,j} \u8868\u793a\u53ea\u9009\u53d6\u524d i i \u4e2a\u7269\u54c1\uff0c\u5bb9\u91cf\u4e3a j j \u7684\u80cc\u5305\uff0c\u6700\u591a\u80fd\u591f\u5230\u8fbe\u7684\u4ef7\u503c \u8f6c\u79fb\u65b9\u7a0b \uff1a \u903b\u8f91\uff1a\u5982\u679c\u6211\u4eec\u5f53\u524d\u5b8c\u6210\u4e86\u524d i-1 i-1 \u4e2a\u7269\u54c1\u7684\u9009\u53d6\u60c5\u51b5\uff0c\u90a3\u4e48\u5f00\u59cb\u8003\u8651\u7b2c i i \u4e2a\u3002\u7b2c i i \u4e2a\u7269\u54c1\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u8981\u4e48\u9009\u53d6\uff0c\u8981\u4e48\u4e0d\u9009\u53d6\u3002 \u5bf9\u4e8e\u4e0d\u9009\u53d6\u7684\u60c5\u51b5\uff0c f_{i,j}=f_{i-1,j} f_{i,j}=f_{i-1,j} \u5bf9\u4e8e\u9009\u53d6\u7b2c i i \u4e2a\u7269\u54c1\u7684\u60c5\u51b5\uff0c f_{i,j}=f_{i-1,j-w_i}+v_i f_{i,j}=f_{i-1,j-w_i}+v_i \u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e24\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u8981\u53d6\u6700\u5927\uff0c\u4e8e\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a f_{i,j} = \\max(f_{i-1,j},f_{i-1,j-w_i}+v_i) \u8fb9\u754c\u6761\u4ef6 \uff1a 0-1\u80cc\u5305\u95ee\u9898\uff0c\u4e0d\u9700\u8981\u7279\u522b\u8bbe\u5b9a\u8fb9\u754c\uff0c\u521d\u59cb\u5316\u65f6\uff0c\u5c06\u6240\u6709 f_j f_j \u8bbe\u4e3a 0 0 \u6216\u8005\u8d1f\u6570\u5373\u53ef \u7a7a\u95f4\u4f18\u5316 \uff1a \u6211\u4eec\u91c7\u53d6\u4e86\u4e8c\u7ef4\u6570\u7ec4\u6765\u5b58\u50a8\u72b6\u6001 f_{i,j} f_{i,j} \uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5728\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684 f_{i,j} f_{i,j} \u53ea\u548c f_{i-1,?} f_{i-1,?} \u6709\u5173\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u6301\u67d0\u4e2a\u987a\u5e8f\u66f4\u65b0\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5373\u53ef\u3002 f_j=\\max(f_j,f_{j-w_i}+v_i) \u6a21\u7248\u4ee3\u7801 \uff1a for ( int i = 0 ; i < n ; i ++ ) for ( int j = W ; j = w [ i ]; j -- ) f [ j ] = max ( f [ j ], f [ j - w [ i ]] + v [ i ]); \u6ce8\u610f\u8fd9\u91cc\uff0c\u5bf9\u4e8e\u80cc\u5305\u5bb9\u91cf\u7684\u5faa\u73af\u65b9\u5411\u662f\u4ece\u9ad8\u5bb9\u91cf\u5230\u4f4e\u5bb9\u91cf\u3002\u539f\u56e0\u662f\u5f53\u679a\u4e3e\u5bb9\u91cf j j \u7684\u65f6\u5019\uff0c\u6bd4\u65b9\u8bf4\uff0c\u6211\u4eec\u5728 f_{i,2w_i} f_{i,2w_i} \u7684\u65f6\u5019\uff0c\u66f4\u65b0\u4f7f\u7528\u4e86\u7b2c i i \u4e2a\u7269\u54c1\uff0c\u90a3\u4e48\u5bf9\u4e8e 0-1 \u80cc\u5305\uff0c\u5e94\u8be5\u4e0d\u80fd\u4f7f\u7528\u4e86\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u88ab\u4e8c\u6b21\u9009\u53d6\uff0c\u8fdd\u80cc\u4e86\u89c4\u5219\u3002","title":"0-1\u80cc\u5305"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#_2","text":"\u6bcf\u79cd\u7269\u54c1\u80fd\u591f\u9009\u53d6\u65e0\u9650\u591a\u6b21\u3002 DP\u72b6\u6001\u3001\u8f6c\u79fb\u65b9\u7a0b\u3001\u8fb9\u754c\u6761\u4ef6\u4e0e 0-1 \u65b9\u7a0b\u5b8c\u5168\u4e00\u81f4\uff0c\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u66f4\u65b0\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4f4e\u5bb9\u91cf\u5230\u9ad8\u5bb9\u91cf\u66f4\u65b0\uff0c\u8fd9\u6837\u6bcf\u6b21\u5c31\u76f8\u5f53\u4e8e\u65e0\u9650\u6b21\u6570\u9009\u53d6\u7b2c i i \u7c7b\u7269\u54c1\u3002 \u6a21\u677f\u4ee3\u7801 \uff1a for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j = W - w [ i ]; j -- ) f [ j + w [ i ]] = max ( f [ j + w [ i ]], f [ j ] + v [ i ]);","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#_3","text":"\u7b2c i i \u79cd\u7269\u54c1\u53ea\u80fd\u6700\u591a\u9009\u53d6 k_i k_i \u6b21 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a f_{i,j} =\\max_{k=0}^{k_i} (f_{i-1,j-k\\times w_i}+v_i\\times k)","title":"\u591a\u91cd\u80cc\u5305"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#poj","text":"","title":"POJ \u76f8\u5173\u9898\u76ee"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#0-1_1","text":"3624 Charm Bracelet\uff0c http://poj.org/problem?id=3624 \uff0c 3624 Charm Bracelet \u89e3\u6cd5","title":"0-1 \u80cc\u5305"},{"location":"Algorithm/%E8%83%8C%E5%8C%85DP/#_4","text":"1384 Piggy Bank\uff0c http://poj.org/problem?id=1384 \uff0c 1384 Piggy Bank 2064 Investment\uff0c http://poj.org/problem?id=2063 \uff0c 2063 Investment 2229 Sumsets\uff0c http://poj.org/problem?id=2229 \uff0c 2229 Sumsets \u89e3\u6cd5 3181 Dollar Dayz\uff0c http://poj.org/problem?id=3181 \uff0c 3181 Dollar Dayz \u89e3\u6cd5","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"CPP/CPPIntro/","text":"\u65b0\u6807\u51c6C++\u7a0b\u5e8f\u8bbe\u8ba1 # Chapter 1 # Chapter 2 # Chapter 3 # Chapter 4 # Chapter 5 # Chapter 6 # Chapter 8 # Chapter 9 # Chapter 10 # Chapter 11\uff1a\u7c7b\u548c\u5bf9\u8c61\u521d\u6b65 # \u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\uff1a\u201d\u62bd\u8c61\u201c\uff0c\u201c\u5c01\u88c5\u201d\uff0c\u201c\u7ee7\u627f\u201d\uff0c\u201c\u591a\u6001\u201d\u7b49\u7279\u70b9\u3002 \u7c7b\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\uff1a # class ClassName : { public : variable X ; function Y ; private : ... protected : ... }; \u201c\u8bbf\u95ee\u8303\u56f4\u8bf4\u660e\u7b26\u201c\u6709 public\uff0cprivate\uff0cprotected\u3002 \u8bbf\u95ee\u5bf9\u8c61\u7684\u6210\u5458 # \u53ef\u4ee5\u4f7f\u7528\u201c\u5bf9\u8c61\u540d.\u6210\u5458\u540d\u201c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u201d\u6307\u9488->\u6210\u5458\u540d\u201c\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee \u7c7b\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\uff0c\u5c06 class \u5173\u952e\u5b57\u6362\u6210 struct \u5173\u952e\u5b57\u3002 struct CRectangle { public : int w , h ; void Init ( int w_ , int h_ ); } \u6ca1\u6709\u6210\u5458\u51fd\u6570\u7684 struct \u8fd8\u662f\u7ed3\u6784\uff0c\u7ed3\u6784\u53d8\u91cf\u4e0d\u662f\u5bf9\u8c61\uff1b\u6709\u6210\u5458\u51fd\u6570\u7684 struct \u5c31\u662f\u7c7b\u3002\u5199\u6210 struct \u7684\u7c7b\u548c\u5199\u6210 class \u7684\u7c7b\u53ea\u5728\u7c7b\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u8303\u56f4\u65b9\u9762\u6709\u4e00\u70b9\u5c0f\u5dee\u5f02\u3002 \u7c7b\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u8303\u56f4 # private\uff1a\u7528\u6765\u6307\u5b9a\u79c1\u6709\u6210\u5458\uff0c\u53ea\u80fd\u88ab\u8be5\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5185\u90e8\u624d\u80fd\u88ab\u8bbf\u95ee\u3002 public\uff1a\u7528\u6765\u6307\u5b9a\u516c\u6709\u6210\u5458\uff0c\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u8bbf\u95ee protected\uff1a\u7528\u6765\u6307\u5b9a\u4fdd\u62a4\u6210\u5458\uff0c\u5728\u7ee7\u627f\u4e2d\u4f1a\u88ab\u4f7f\u7528 \u5982\u679c\u4e0d\u4f7f\u7528\u53ef\u8bbf\u95ee\u8303\u56f4\u7b26\u5219\u9ed8\u8ba4\u662f private \u5185\u8054\u6210\u5458\u51fd\u6570 # class MyClass : { inlinee void func (); } \u5185\u8054\u6210\u5458\u51fd\u6570\u6267\u884c\u65f6\u95f4\u8f83\u5feb\uff0c\u4f46\u662f\u4f1a\u589e\u5927\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4f53\u79ef\u3002\u5982\u679c\u6267\u884c\u65f6\u95f4\u8f83\u957f\u7684\u5185\u8054\u51fd\u6570\uff0c\u53ea\u4f1a\u989d\u5916\u589e\u52a0\u5f00\u9500\u3002 Chapter 12\uff1a\u7c7b\u548c\u5bf9\u8c61\u8fdb\u9636 # \u6784\u9020\u51fd\u6570 # c++\u7684\u53d8\u91cf\u521d\u59cb\u5316\uff1a\u5168\u5c40\u53d8\u91cf\u9ed8\u8ba4\u4e3a0\uff1b\u5c40\u90e8\u53d8\u91cf\u662f\u52a8\u6001\u5206\u914d\u5728\u6808\u4e0a\uff0c\u662f\u968f\u673a\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5c06\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u90fd\u521d\u59cb\u5316\u4e3a0:\u56e0\u4e3a\u4e00\u4e2a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6bcf\u6b21\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u90fd\u53ef\u80fd\u4e0d\u540c\uff0c\u6240\u4ee5\u81ea\u52a8\u521d\u59cb\u5316\u7684\u5de5\u4f5c\u5c31\u4e0d\u662f\u4e00\u6b21\u6027\u7684\u4e86\uff1b \u6784\u9020\u51fd\u6570 constructor\uff0c\u5728\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u7684\u51fd\u6570\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u7c7b\u7684\u8bbe\u8ba1\u8005\u6ca1\u6709\u7f16\u5199\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570\u88ab\u79f0\u4e3a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 default constructor\u3002\u6ce8\u610f\uff1a\u6784\u9020\u51fd\u6570\u5e76\u4e0d\u662f\u8d1f\u8d23\u4e3a\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u662f\u521d\u59cb\u5316\u5185\u5b58\u7a7a\u95f4\u3002\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u7f16\u8bd1\u5230\u80fd\u751f\u6210\u5bf9\u8c61\u7684\u8bed\u53e5\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u53c2\u6570\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u662f\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 \u590d\u5236\u6784\u9020\u51fd\u6570 # \u590d\u5236\u6784\u9020\u51fd\u6570\u662f\u6784\u9020\u51fd\u6570\u7684\u4e00\u79cd\uff0c\u4e5f\u79f0\u4e3a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u662f\u672c\u7c7b\u7684\u5f15\u7528\u3002\u5982\u679c\u7c7b\u7684\u8bbe\u8ba1\u8005\u6ca1\u6709\u7f16\u5199\u590d\u5236\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u751f\u6210\u590d\u5236\u6784\u9020\u51fd\u6570\u3002\u6ce8\u610f\uff1a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff08\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff09\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46\u662f\u590d\u5236\u6784\u9020\u51fd\u6570\u603b\u662f\u4f1a\u5b58\u5728\u3002 class MyClass : { MyClass ( const MyClass & c ){...} //\u6b63\u786e MyClass ( MyClass c ){...} // \u9519\u8bef } \u590d\u5236\u6784\u9020\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u7684\u4e09\u79cd\u60c5\u51b5\uff1a \u7528\u4e00\u4e2a\u5bf9\u8c61\u53bb\u521d\u59cb\u5316\u540c\u7c7b\u7684\u53e6\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u5f15\u53d1\u590d\u5236\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528 \u5982\u679c\u51fd\u6570F\u7684\u53c2\u6570\u662f\u7c7b A \u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u51fd\u6570F\u88ab\u8c03\u7528\u65f6\uff0c\u7c7b A \u7684\u590d\u5236\u6784\u9020\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u3002 class A { public : A () { cout << \"Default construct called\" << endl ; }; A ( const A & a ) { cout << \"Copy construct called\" << endl ; } }; void Func ( A a ) { // void Func(A &a) // void Func(const A &a) return ; } int main () { A a ; Func ( a ); return 0 ; } \u5982\u679c\u8fd0\u884c\u4ee5\u4e0a\u7a0b\u5e8f\uff0c\u5f97\u5230\u7684\u8f93\u51fa\u4e3a\uff1a Default construct called Copy construct called \u5982\u679c\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u52a0\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u4f1a\u628a a \u76f4\u63a5\u4f20\u8fdb\u51fd\u6570 Func \u4e2d\uff0c\u4e0d\u4f1a\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff1a Default construct called \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u4f20\u53c2\u6570\u662f\u5f15\u7528\uff0c\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u578b\u53c2\u88ab\u6539\u53d8\uff0c\u5b9e\u53c2\u7684\u503c\u4e5f\u4f1a\u88ab\u6539\u53d8\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u52a0\u4e0a const \u5173\u952e\u5b57\u4e86\u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u7c7b\u7684\u5bf9\u8c61\uff0c\u5219\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u7c7b\u7684\u590d\u5236\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528 \u6790\u6784\u51fd\u6570 # \u6790\u6784\u51fd\u6570\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u79cd\uff0c\u540d\u5b57\u4e0e\u7c7b\u540d\u76f8\u540c\uff0c\u4f46\u524d\u9762\u8981\u52a0\u4e0a~\uff0c\u6ca1\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u4e00\u4e2a\u7c7b\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u6d88\u4ea1\u65f6\u88ab\u8c03\u7528\u3002 \u6790\u6784\u51fd\u6570\u7684\u51cb\u4ea1\u5468\u671f\u4f8b\u5b50 \u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570 #","title":"Main Concept"},{"location":"CPP/CPPIntro/#c","text":"","title":"\u65b0\u6807\u51c6C++\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"CPP/CPPIntro/#chapter-1","text":"","title":"Chapter 1"},{"location":"CPP/CPPIntro/#chapter-2","text":"","title":"Chapter 2"},{"location":"CPP/CPPIntro/#chapter-3","text":"","title":"Chapter 3"},{"location":"CPP/CPPIntro/#chapter-4","text":"","title":"Chapter 4"},{"location":"CPP/CPPIntro/#chapter-5","text":"","title":"Chapter 5"},{"location":"CPP/CPPIntro/#chapter-6","text":"","title":"Chapter 6"},{"location":"CPP/CPPIntro/#chapter-8","text":"","title":"Chapter 8"},{"location":"CPP/CPPIntro/#chapter-9","text":"","title":"Chapter 9"},{"location":"CPP/CPPIntro/#chapter-10","text":"","title":"Chapter 10"},{"location":"CPP/CPPIntro/#chapter-11","text":"\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u8bbe\u8ba1\uff1a\u201d\u62bd\u8c61\u201c\uff0c\u201c\u5c01\u88c5\u201d\uff0c\u201c\u7ee7\u627f\u201d\uff0c\u201c\u591a\u6001\u201d\u7b49\u7279\u70b9\u3002","title":"Chapter 11\uff1a\u7c7b\u548c\u5bf9\u8c61\u521d\u6b65"},{"location":"CPP/CPPIntro/#_1","text":"class ClassName : { public : variable X ; function Y ; private : ... protected : ... }; \u201c\u8bbf\u95ee\u8303\u56f4\u8bf4\u660e\u7b26\u201c\u6709 public\uff0cprivate\uff0cprotected\u3002","title":"\u7c7b\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\uff1a"},{"location":"CPP/CPPIntro/#_2","text":"\u53ef\u4ee5\u4f7f\u7528\u201c\u5bf9\u8c61\u540d.\u6210\u5458\u540d\u201c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u201d\u6307\u9488->\u6210\u5458\u540d\u201c\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee \u7c7b\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\uff0c\u5c06 class \u5173\u952e\u5b57\u6362\u6210 struct \u5173\u952e\u5b57\u3002 struct CRectangle { public : int w , h ; void Init ( int w_ , int h_ ); } \u6ca1\u6709\u6210\u5458\u51fd\u6570\u7684 struct \u8fd8\u662f\u7ed3\u6784\uff0c\u7ed3\u6784\u53d8\u91cf\u4e0d\u662f\u5bf9\u8c61\uff1b\u6709\u6210\u5458\u51fd\u6570\u7684 struct \u5c31\u662f\u7c7b\u3002\u5199\u6210 struct \u7684\u7c7b\u548c\u5199\u6210 class \u7684\u7c7b\u53ea\u5728\u7c7b\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u8303\u56f4\u65b9\u9762\u6709\u4e00\u70b9\u5c0f\u5dee\u5f02\u3002","title":"\u8bbf\u95ee\u5bf9\u8c61\u7684\u6210\u5458"},{"location":"CPP/CPPIntro/#_3","text":"private\uff1a\u7528\u6765\u6307\u5b9a\u79c1\u6709\u6210\u5458\uff0c\u53ea\u80fd\u88ab\u8be5\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5185\u90e8\u624d\u80fd\u88ab\u8bbf\u95ee\u3002 public\uff1a\u7528\u6765\u6307\u5b9a\u516c\u6709\u6210\u5458\uff0c\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u8bbf\u95ee protected\uff1a\u7528\u6765\u6307\u5b9a\u4fdd\u62a4\u6210\u5458\uff0c\u5728\u7ee7\u627f\u4e2d\u4f1a\u88ab\u4f7f\u7528 \u5982\u679c\u4e0d\u4f7f\u7528\u53ef\u8bbf\u95ee\u8303\u56f4\u7b26\u5219\u9ed8\u8ba4\u662f private","title":"\u7c7b\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u8303\u56f4"},{"location":"CPP/CPPIntro/#_4","text":"class MyClass : { inlinee void func (); } \u5185\u8054\u6210\u5458\u51fd\u6570\u6267\u884c\u65f6\u95f4\u8f83\u5feb\uff0c\u4f46\u662f\u4f1a\u589e\u5927\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4f53\u79ef\u3002\u5982\u679c\u6267\u884c\u65f6\u95f4\u8f83\u957f\u7684\u5185\u8054\u51fd\u6570\uff0c\u53ea\u4f1a\u989d\u5916\u589e\u52a0\u5f00\u9500\u3002","title":"\u5185\u8054\u6210\u5458\u51fd\u6570"},{"location":"CPP/CPPIntro/#chapter-12","text":"","title":"Chapter 12\uff1a\u7c7b\u548c\u5bf9\u8c61\u8fdb\u9636"},{"location":"CPP/CPPIntro/#_5","text":"c++\u7684\u53d8\u91cf\u521d\u59cb\u5316\uff1a\u5168\u5c40\u53d8\u91cf\u9ed8\u8ba4\u4e3a0\uff1b\u5c40\u90e8\u53d8\u91cf\u662f\u52a8\u6001\u5206\u914d\u5728\u6808\u4e0a\uff0c\u662f\u968f\u673a\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5c06\u6240\u6709\u5c40\u90e8\u53d8\u91cf\u90fd\u521d\u59cb\u5316\u4e3a0:\u56e0\u4e3a\u4e00\u4e2a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6bcf\u6b21\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u90fd\u53ef\u80fd\u4e0d\u540c\uff0c\u6240\u4ee5\u81ea\u52a8\u521d\u59cb\u5316\u7684\u5de5\u4f5c\u5c31\u4e0d\u662f\u4e00\u6b21\u6027\u7684\u4e86\uff1b \u6784\u9020\u51fd\u6570 constructor\uff0c\u5728\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u7684\u51fd\u6570\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u7c7b\u7684\u8bbe\u8ba1\u8005\u6ca1\u6709\u7f16\u5199\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570\u88ab\u79f0\u4e3a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 default constructor\u3002\u6ce8\u610f\uff1a\u6784\u9020\u51fd\u6570\u5e76\u4e0d\u662f\u8d1f\u8d23\u4e3a\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u662f\u521d\u59cb\u5316\u5185\u5b58\u7a7a\u95f4\u3002\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u7f16\u8bd1\u5230\u80fd\u751f\u6210\u5bf9\u8c61\u7684\u8bed\u53e5\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u53c2\u6570\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u662f\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002","title":"\u6784\u9020\u51fd\u6570"},{"location":"CPP/CPPIntro/#_6","text":"\u590d\u5236\u6784\u9020\u51fd\u6570\u662f\u6784\u9020\u51fd\u6570\u7684\u4e00\u79cd\uff0c\u4e5f\u79f0\u4e3a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u662f\u672c\u7c7b\u7684\u5f15\u7528\u3002\u5982\u679c\u7c7b\u7684\u8bbe\u8ba1\u8005\u6ca1\u6709\u7f16\u5199\u590d\u5236\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u751f\u6210\u590d\u5236\u6784\u9020\u51fd\u6570\u3002\u6ce8\u610f\uff1a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff08\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff09\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46\u662f\u590d\u5236\u6784\u9020\u51fd\u6570\u603b\u662f\u4f1a\u5b58\u5728\u3002 class MyClass : { MyClass ( const MyClass & c ){...} //\u6b63\u786e MyClass ( MyClass c ){...} // \u9519\u8bef } \u590d\u5236\u6784\u9020\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u7684\u4e09\u79cd\u60c5\u51b5\uff1a \u7528\u4e00\u4e2a\u5bf9\u8c61\u53bb\u521d\u59cb\u5316\u540c\u7c7b\u7684\u53e6\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u5f15\u53d1\u590d\u5236\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528 \u5982\u679c\u51fd\u6570F\u7684\u53c2\u6570\u662f\u7c7b A \u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u51fd\u6570F\u88ab\u8c03\u7528\u65f6\uff0c\u7c7b A \u7684\u590d\u5236\u6784\u9020\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u3002 class A { public : A () { cout << \"Default construct called\" << endl ; }; A ( const A & a ) { cout << \"Copy construct called\" << endl ; } }; void Func ( A a ) { // void Func(A &a) // void Func(const A &a) return ; } int main () { A a ; Func ( a ); return 0 ; } \u5982\u679c\u8fd0\u884c\u4ee5\u4e0a\u7a0b\u5e8f\uff0c\u5f97\u5230\u7684\u8f93\u51fa\u4e3a\uff1a Default construct called Copy construct called \u5982\u679c\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u52a0\u4e00\u4e2a\u5f15\u7528\uff0c\u5219\u4f1a\u628a a \u76f4\u63a5\u4f20\u8fdb\u51fd\u6570 Func \u4e2d\uff0c\u4e0d\u4f1a\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff1a Default construct called \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u4f20\u53c2\u6570\u662f\u5f15\u7528\uff0c\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u578b\u53c2\u88ab\u6539\u53d8\uff0c\u5b9e\u53c2\u7684\u503c\u4e5f\u4f1a\u88ab\u6539\u53d8\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u52a0\u4e0a const \u5173\u952e\u5b57\u4e86\u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u7c7b\u7684\u5bf9\u8c61\uff0c\u5219\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u7c7b\u7684\u590d\u5236\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528","title":"\u590d\u5236\u6784\u9020\u51fd\u6570"},{"location":"CPP/CPPIntro/#_7","text":"\u6790\u6784\u51fd\u6570\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u79cd\uff0c\u540d\u5b57\u4e0e\u7c7b\u540d\u76f8\u540c\uff0c\u4f46\u524d\u9762\u8981\u52a0\u4e0a~\uff0c\u6ca1\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002\u4e00\u4e2a\u7c7b\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u6d88\u4ea1\u65f6\u88ab\u8c03\u7528\u3002 \u6790\u6784\u51fd\u6570\u7684\u51cb\u4ea1\u5468\u671f\u4f8b\u5b50","title":"\u6790\u6784\u51fd\u6570"},{"location":"CPP/CPPIntro/#_8","text":"","title":"\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"LeetCode/LeetCode/","text":"This is the LeetCode","title":"Problems"},{"location":"LeetCode/WeeklyContest/","text":"This is LeetCode Weekly Contest","title":"WeeklyContest"},{"location":"LeetCode/WeeklyContest225/","text":"First Problem # class Solution { public : string maximumTime ( string time ) { string ret = time ; if ( ret [ 0 ] == '?' && ( ret [ 1 ] <= '3' || ret [ 1 ] == '?' )) ret [ 0 ] = '2' ; else if ( ret [ 0 ] == '?' && ret [ 1 ] >= 4 ) ret [ 0 ] = '1' ; if ( ret [ 1 ] == '?' && ret [ 0 ] == '2' ) ret [ 1 ] = '3' ; else if ( ret [ 1 ] == '?' && ( ret [ 0 ] == '1' || ret [ 0 ] == '0' )) ret [ 1 ] = '9' ; if ( ret [ 3 ] == '?' ) ret [ 3 ] = '5' ; if ( ret [ 4 ] == '?' ) ret [ 4 ] = '9' ; return ret ; } };","title":"225 Weekly Contest"},{"location":"LeetCode/WeeklyContest225/#first-problem","text":"class Solution { public : string maximumTime ( string time ) { string ret = time ; if ( ret [ 0 ] == '?' && ( ret [ 1 ] <= '3' || ret [ 1 ] == '?' )) ret [ 0 ] = '2' ; else if ( ret [ 0 ] == '?' && ret [ 1 ] >= 4 ) ret [ 0 ] = '1' ; if ( ret [ 1 ] == '?' && ret [ 0 ] == '2' ) ret [ 1 ] = '3' ; else if ( ret [ 1 ] == '?' && ( ret [ 0 ] == '1' || ret [ 0 ] == '0' )) ret [ 1 ] = '9' ; if ( ret [ 3 ] == '?' ) ret [ 3 ] = '5' ; if ( ret [ 4 ] == '?' ) ret [ 4 ] = '9' ; return ret ; } };","title":"First Problem"},{"location":"POJ/1384PiggyBank/","text":"1384 Piggy Bank # \u8fd9\u9053\u9898\u4e5f\u662f\u7528\u5b8c\u5168\u80cc\u5305\u7684\u6a21\u7248\u3002 \u5c0f\u533a\u522b\u4e3a\uff1a\u6a21\u7248\u91cc\u4f7f\u7528\u7684\u8f6c\u79fb\u65b9\u7a0b\u662f\u53d6\u8f83\u5927\u503c\uff0c\u6211\u4eec\u8fd9\u91cc\u5219\u662f\u8981\u53d6\u8f83\u5c0f\u503c\u3002 \u7136\u540e\u5982\u679c\u6211\u4eec\u7684\u91cd\u91cf\u6ca1\u6709\u88ab\u66f4\u65b0\u8fc7\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6ca1\u6709\u4efb\u4f55\u7ec4\u5408\u7684\u548c\u80fd\u8fbe\u5230\u8fd9\u4e2a\u91cd\u91cf\uff0c\u5c31\u8fd4\u56de\u4e0d\u53ef\u80fd\u3002 int main () { int T ; cin >> T ; while ( T > 0 ) { T -- ; int E , P ; int n ; cin >> E >> P ; cin >> n ; vector < vector < int > > coins ( n , vector < int > ( 2 , 0 )); // value and weight for ( int i = 0 ; i < n ; i ++ ) cin >> coins [ i ][ 0 ] >> coins [ i ][ 1 ]; vector < int > dp ( P - E + 1 , INT_MAX / 2 ); dp [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= P - E - coins [ i ][ 1 ]; j ++ ) { dp [ j + coins [ i ][ 1 ]] = min ( dp [ j + coins [ i ][ 1 ]], dp [ j ] + coins [ i ][ 0 ]); } } if ( dp [ P - E ] != INT_MAX / 2 ) cout << \"The minimum amount of money in the piggy-bank is \" << dp [ P - E ] << \".\" << endl ; else cout << \"This is impossible.\" << endl ; } return 0 ; } \u590d\u6742\u5ea6\u5206\u6790\uff1a # \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(NM) O(NM) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(N) O(N)","title":"1384 Piggy Bank"},{"location":"POJ/1384PiggyBank/#1384-piggy-bank","text":"\u8fd9\u9053\u9898\u4e5f\u662f\u7528\u5b8c\u5168\u80cc\u5305\u7684\u6a21\u7248\u3002 \u5c0f\u533a\u522b\u4e3a\uff1a\u6a21\u7248\u91cc\u4f7f\u7528\u7684\u8f6c\u79fb\u65b9\u7a0b\u662f\u53d6\u8f83\u5927\u503c\uff0c\u6211\u4eec\u8fd9\u91cc\u5219\u662f\u8981\u53d6\u8f83\u5c0f\u503c\u3002 \u7136\u540e\u5982\u679c\u6211\u4eec\u7684\u91cd\u91cf\u6ca1\u6709\u88ab\u66f4\u65b0\u8fc7\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6ca1\u6709\u4efb\u4f55\u7ec4\u5408\u7684\u548c\u80fd\u8fbe\u5230\u8fd9\u4e2a\u91cd\u91cf\uff0c\u5c31\u8fd4\u56de\u4e0d\u53ef\u80fd\u3002 int main () { int T ; cin >> T ; while ( T > 0 ) { T -- ; int E , P ; int n ; cin >> E >> P ; cin >> n ; vector < vector < int > > coins ( n , vector < int > ( 2 , 0 )); // value and weight for ( int i = 0 ; i < n ; i ++ ) cin >> coins [ i ][ 0 ] >> coins [ i ][ 1 ]; vector < int > dp ( P - E + 1 , INT_MAX / 2 ); dp [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= P - E - coins [ i ][ 1 ]; j ++ ) { dp [ j + coins [ i ][ 1 ]] = min ( dp [ j + coins [ i ][ 1 ]], dp [ j ] + coins [ i ][ 0 ]); } } if ( dp [ P - E ] != INT_MAX / 2 ) cout << \"The minimum amount of money in the piggy-bank is \" << dp [ P - E ] << \".\" << endl ; else cout << \"This is impossible.\" << endl ; } return 0 ; }","title":"1384 Piggy Bank"},{"location":"POJ/1384PiggyBank/#_1","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(NM) O(NM) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(N) O(N)","title":"\u590d\u6742\u5ea6\u5206\u6790\uff1a"},{"location":"POJ/1611TheSuspects/","text":"1611 The Suspects # \u8fd9\u9053\u9898\u662f\u7ecf\u5178\u7684\u5e76\u67e5\u96c6\u9898\u76ee\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6b63\u5e38\u8c03\u7528\u6a21\u7248\u5c31\u597d\u3002 \u6ce8\u610f\uff1a\u6211\u4eec\u4e4b\u540e\u5224\u5b9a\u6761\u4ef6\u662f\u7956\u5148\u8282\u70b9\u662f\u5426\u662f0\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5408\u5e76\u65f6\u5c31\u8981\u6ce8\u610f\uff0c\u8bb2\u5e8f\u53f7\u5c0f\u7684\uff0c\u8bbe\u7f6e\u4e3a\u7956\u5148\u8282\u70b9\u3002 vector < int > parent ; int find ( int idx ) { if ( parent [ idx ] == idx ) return idx ; return parent [ idx ] = find ( parent [ idx ]); } void unionSet ( int x , int y ) { int px = find ( x ); int py = find ( y ); if ( px == py ) return ; if ( px < py ) parent [ py ] = px ; else parent [ px ] = py ; return ; } int main () { int n , m ; while ( cin >> n >> m ) { if ( n == 0 && m == 0 ) break ; parent . resize ( n , 0 ); for ( int i = 0 ; i < n ; i ++ ) parent [ i ] = i ; for ( int i = 0 ; i < m ; i ++ ) { int num ; int a ; cin >> num >> a ; num -- ; while ( num -- ) { int b ; cin >> b ; unionSet ( a , b ); } } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( i == 0 || find ( i ) == 0 ) cnt ++ ; cout << cnt << endl ; } return 0 ; }","title":"1611 The Suspects"},{"location":"POJ/1611TheSuspects/#1611-the-suspects","text":"\u8fd9\u9053\u9898\u662f\u7ecf\u5178\u7684\u5e76\u67e5\u96c6\u9898\u76ee\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6b63\u5e38\u8c03\u7528\u6a21\u7248\u5c31\u597d\u3002 \u6ce8\u610f\uff1a\u6211\u4eec\u4e4b\u540e\u5224\u5b9a\u6761\u4ef6\u662f\u7956\u5148\u8282\u70b9\u662f\u5426\u662f0\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5408\u5e76\u65f6\u5c31\u8981\u6ce8\u610f\uff0c\u8bb2\u5e8f\u53f7\u5c0f\u7684\uff0c\u8bbe\u7f6e\u4e3a\u7956\u5148\u8282\u70b9\u3002 vector < int > parent ; int find ( int idx ) { if ( parent [ idx ] == idx ) return idx ; return parent [ idx ] = find ( parent [ idx ]); } void unionSet ( int x , int y ) { int px = find ( x ); int py = find ( y ); if ( px == py ) return ; if ( px < py ) parent [ py ] = px ; else parent [ px ] = py ; return ; } int main () { int n , m ; while ( cin >> n >> m ) { if ( n == 0 && m == 0 ) break ; parent . resize ( n , 0 ); for ( int i = 0 ; i < n ; i ++ ) parent [ i ] = i ; for ( int i = 0 ; i < m ; i ++ ) { int num ; int a ; cin >> num >> a ; num -- ; while ( num -- ) { int b ; cin >> b ; unionSet ( a , b ); } } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( i == 0 || find ( i ) == 0 ) cnt ++ ; cout << cnt << endl ; } return 0 ; }","title":"1611 The Suspects"},{"location":"POJ/2063Investment/","text":"2664 Investment # \u8fd9\u9053\u9898\u4e5f\u662f\u5b8c\u5168\u80cc\u5305\u6a21\u7248\u6765\u505a\u3002\u6ce8\u610f\u7684\u4e8b\u60c5\u662f\u5982\u679c\u6211\u4eec\u50bb\u50bb\u7684\u5f00\u548c price \u7b49\u957f\u7684\u6570\u7ec4\u4f1a\u7206 memory limited error\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u6240\u6709 bonds \u90fd\u662f 1000 \u7684\u500d\u6570\uff0c\u6765\u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a price/1000 \u7684\u6570\u7ec4\u3002\u7136\u540e\u6bcf\u6b21\u52a0\u4e0a price \u53ef\u4ee5\u6700\u591a\u589e\u52a0\u7684\u5229\u6da6\u5373\u53ef\uff0c\u6ca1\u6709\u4ec0\u4e48\u592a\u5927\u7684\u96be\u5ea6 int main () { int N ; cin >> N ; while ( N > 0 ) { N -- ; int price , year ; int n ; cin >> price >> year ; cin >> n ; vector < vector < int > > bonds ( n , vector < int > ( 2 , 0 )); for ( int i = 0 ; i < n ; i ++ ) cin >> bonds [ i ][ 0 ] >> bonds [ i ][ 1 ]; vector < int > dp ; while ( year > 0 ) { dp . resize ( price / 1000 + 1 , 0 ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= price / 1000 - bonds [ i ][ 0 ] / 1000 ; j += 1 ) { dp [ j + bonds [ i ][ 0 ] / 1000 ] = max ( dp [ j + bonds [ i ][ 0 ] / 1000 ], dp [ j ] + bonds [ i ][ 1 ]); } } //cout << price << endl; price += dp [ price / 1000 ]; year -- ; } cout << price << endl ; } return 0 ; } \u590d\u6742\u5ea6\u5206\u6790 # \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(N \\text{year}) O(N \\text{year}) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(N) O(N)","title":"2063 Investment"},{"location":"POJ/2063Investment/#2664-investment","text":"\u8fd9\u9053\u9898\u4e5f\u662f\u5b8c\u5168\u80cc\u5305\u6a21\u7248\u6765\u505a\u3002\u6ce8\u610f\u7684\u4e8b\u60c5\u662f\u5982\u679c\u6211\u4eec\u50bb\u50bb\u7684\u5f00\u548c price \u7b49\u957f\u7684\u6570\u7ec4\u4f1a\u7206 memory limited error\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u6240\u6709 bonds \u90fd\u662f 1000 \u7684\u500d\u6570\uff0c\u6765\u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a price/1000 \u7684\u6570\u7ec4\u3002\u7136\u540e\u6bcf\u6b21\u52a0\u4e0a price \u53ef\u4ee5\u6700\u591a\u589e\u52a0\u7684\u5229\u6da6\u5373\u53ef\uff0c\u6ca1\u6709\u4ec0\u4e48\u592a\u5927\u7684\u96be\u5ea6 int main () { int N ; cin >> N ; while ( N > 0 ) { N -- ; int price , year ; int n ; cin >> price >> year ; cin >> n ; vector < vector < int > > bonds ( n , vector < int > ( 2 , 0 )); for ( int i = 0 ; i < n ; i ++ ) cin >> bonds [ i ][ 0 ] >> bonds [ i ][ 1 ]; vector < int > dp ; while ( year > 0 ) { dp . resize ( price / 1000 + 1 , 0 ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= price / 1000 - bonds [ i ][ 0 ] / 1000 ; j += 1 ) { dp [ j + bonds [ i ][ 0 ] / 1000 ] = max ( dp [ j + bonds [ i ][ 0 ] / 1000 ], dp [ j ] + bonds [ i ][ 1 ]); } } //cout << price << endl; price += dp [ price / 1000 ]; year -- ; } cout << price << endl ; } return 0 ; }","title":"2664 Investment"},{"location":"POJ/2063Investment/#_1","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(N \\text{year}) O(N \\text{year}) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(N) O(N)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"POJ/2229Sumsets/","text":"2229 Sumsets # \u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u7528\u5b8c\u5168\u80cc\u5305\u7684\u601d\u8def\u505a\u3002\u4f46\u662f\u8981\u660e\u786e\u6211\u4eec\u7684 dp dp \u6570\u7ec4\u4ee3\u8868\u7684\u610f\u4e49 \u5728\u538b\u7f29\u6570\u7ec4\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u7528\u4e8c\u7ef4\u6570\u7ec4\u65b9\u4fbf\u7406\u89e3\uff1a f_{i,j} f_{i,j} \u8868\u793a\u7528 2^0,...,2^{i-1} 2^0,...,2^{i-1} \u8fd9\u4e9b\u6570\u5b57\uff0c\u80fd\u591f\u7ec4\u6210\u5408\u4e3a j j \u7684\u4e2a\u6570\u3002 \u90a3\u4e48\u8fb9\u754c\u6761\u4ef6\u5c31\u8981\u6ce8\u610f\uff0c\u548c\u4e3a 0 0 \u7684\u65b9\u6cd5\u5c31\u4e3a 1 1 \uff0c\u6240\u4ee5 dp[0] = 1 dp[0] = 1 \u4e3a\u8fb9\u754c\u6761\u4ef6 \u90a3\u4e48\u6211\u4eec\u7684\u8f6c\u79fb\u65b9\u7a0b\u4e5f\u662f\u6709\u6240\u53d8\u5316\uff1a f_{i,j} = f_{i,j} + f_{i-1,j-w_i} \u903b\u8f91\u4e3a\uff1a\u5728\u4e4b\u524d\u7528\u524d i-1 i-1 \u79cd 2 2 \u7684\u5e42\u80fd\u591f\u7ec4\u6210\u5bb9\u91cf\u4e3a j j \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 f_{i-1,?} f_{i-1,?} \u7684\u57fa\u7840\u4e0a\uff0c\u5f00\u59cb\u4e0d\u505c\u7684\u589e\u52a0\u82e5\u5e72 2^i 2^i \u6765\u589e\u52a0\u7ed3\u679c\u4e2a\u6570\u3002\u548c\u5b8c\u5168\u80cc\u5305\u7684\u6a21\u7248\u7684\u672c\u8d28\u533a\u522b\u5c31\u662f\uff0cPOJ2229\u662f\u6c42\u603b\u548c\uff0c\u5e76\u4e0d\u662f\u6700\u5927\u4ef7\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u6ce8\u610f int main () { int N ; cin >> N ; vector < int > dp ( N + 1 , 0 ); vector < int > two ; dp [ 0 ] = 1 ; int t = 1 ; while ( t <= N ) { two . push_back ( t ); t = t << 1 ; } for ( int i = 0 ; i < int ( two . size ()); i ++ ) for ( int j = 0 ; j <= N - two [ i ]; j ++ ) dp [ j + two [ i ]] = ( dp [ j + two [ i ]] + dp [ j ]) % 1000000000 ; cout << dp [ N ] << endl ; return 0 ; } \u590d\u6742\u5ea6\u5206\u6790 # \u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0c\u8f83\u5927\u7684\u662f O(N) O(N) \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a\u6211\u4eec\u7684 2 2 \u7684\u5e42\u4e2a\u6570\u4e3a logN logN \uff0c\u5bb9\u91cf\u5faa\u73af\u603b\u6570\u4e3a N N \uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(NlogN) O(NlogN)","title":"2229 Sumsets"},{"location":"POJ/2229Sumsets/#2229-sumsets","text":"\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u7528\u5b8c\u5168\u80cc\u5305\u7684\u601d\u8def\u505a\u3002\u4f46\u662f\u8981\u660e\u786e\u6211\u4eec\u7684 dp dp \u6570\u7ec4\u4ee3\u8868\u7684\u610f\u4e49 \u5728\u538b\u7f29\u6570\u7ec4\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u7528\u4e8c\u7ef4\u6570\u7ec4\u65b9\u4fbf\u7406\u89e3\uff1a f_{i,j} f_{i,j} \u8868\u793a\u7528 2^0,...,2^{i-1} 2^0,...,2^{i-1} \u8fd9\u4e9b\u6570\u5b57\uff0c\u80fd\u591f\u7ec4\u6210\u5408\u4e3a j j \u7684\u4e2a\u6570\u3002 \u90a3\u4e48\u8fb9\u754c\u6761\u4ef6\u5c31\u8981\u6ce8\u610f\uff0c\u548c\u4e3a 0 0 \u7684\u65b9\u6cd5\u5c31\u4e3a 1 1 \uff0c\u6240\u4ee5 dp[0] = 1 dp[0] = 1 \u4e3a\u8fb9\u754c\u6761\u4ef6 \u90a3\u4e48\u6211\u4eec\u7684\u8f6c\u79fb\u65b9\u7a0b\u4e5f\u662f\u6709\u6240\u53d8\u5316\uff1a f_{i,j} = f_{i,j} + f_{i-1,j-w_i} \u903b\u8f91\u4e3a\uff1a\u5728\u4e4b\u524d\u7528\u524d i-1 i-1 \u79cd 2 2 \u7684\u5e42\u80fd\u591f\u7ec4\u6210\u5bb9\u91cf\u4e3a j j \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 f_{i-1,?} f_{i-1,?} \u7684\u57fa\u7840\u4e0a\uff0c\u5f00\u59cb\u4e0d\u505c\u7684\u589e\u52a0\u82e5\u5e72 2^i 2^i \u6765\u589e\u52a0\u7ed3\u679c\u4e2a\u6570\u3002\u548c\u5b8c\u5168\u80cc\u5305\u7684\u6a21\u7248\u7684\u672c\u8d28\u533a\u522b\u5c31\u662f\uff0cPOJ2229\u662f\u6c42\u603b\u548c\uff0c\u5e76\u4e0d\u662f\u6700\u5927\u4ef7\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u6ce8\u610f int main () { int N ; cin >> N ; vector < int > dp ( N + 1 , 0 ); vector < int > two ; dp [ 0 ] = 1 ; int t = 1 ; while ( t <= N ) { two . push_back ( t ); t = t << 1 ; } for ( int i = 0 ; i < int ( two . size ()); i ++ ) for ( int j = 0 ; j <= N - two [ i ]; j ++ ) dp [ j + two [ i ]] = ( dp [ j + two [ i ]] + dp [ j ]) % 1000000000 ; cout << dp [ N ] << endl ; return 0 ; }","title":"2229 Sumsets"},{"location":"POJ/2229Sumsets/#_1","text":"\u7a7a\u95f4\u590d\u6742\u5ea6 \uff1a\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0c\u8f83\u5927\u7684\u662f O(N) O(N) \u65f6\u95f4\u590d\u6742\u5ea6 \uff1a\u6211\u4eec\u7684 2 2 \u7684\u5e42\u4e2a\u6570\u4e3a logN logN \uff0c\u5bb9\u91cf\u5faa\u73af\u603b\u6570\u4e3a N N \uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(NlogN) O(NlogN)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"POJ/2236WirelessWork/","text":"2236 Wireless Work # \u8fd9\u4e5f\u662f\u4e00\u9053\u7ecf\u5178\u7684union find\u6a21\u7248\u9898\u76ee\u3002\u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\uff0c\u9996\u5148\u4fdd\u5b58\u4e00\u4e0b\u6bcf\u53f0\u7535\u8111\u80fd\u4ee5\u8ddd\u79bb d \u8fde\u63a5\u7684\u5907\u9009\uff1b\u7136\u540e\u5f00\u59cb\u5f00\u59cb\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316\u3001\u5408\u5e76\u3001\u67e5\u627e\u7b49\u64cd\u4f5c\u3002\u4e00\u65e6\u53d1\u73b0\uff0c\u88ab\u4fee\u590d\u7684\u67d0\u53f0\u7535\u8111\u7684 d \u8303\u56f4\u5185\u6709\u7535\u8111\u4e5f\u662f\u88ab\u4fee\u590d\uff0c\u90a3\u4e48\u5c31\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u3002 \u67e5\u770b\u65f6\u67e5\u770b\u4e24\u53f0\u7535\u8111\u662f\u5426\u662f\u540c\u4e00\u7956\u5148\u8282\u70b9\u5373\u53ef\u3002 vector < int > parent ; int find ( int idx ) { if ( parent [ idx ] == idx ) return idx ; return parent [ idx ] = find ( parent [ idx ]); } void unionSet ( int x , int y ) { int px = find ( x ); int py = find ( y ); if ( px == py ) return ; if ( px < py ) parent [ py ] = px ; else parent [ px ] = py ; return ; } int main () { int N , d ; cin >> N >> d ; vector < vector < int > > coor ( N + 1 , vector < int > ( 2 , 0 )); vector < bool > mem ( N + 1 , false ); parent . resize ( N + 1 , 0 ); // Initialization for ( int i = 1 ; i <= N ; i ++ ) parent [ i ] = i ; for ( int i = 1 ; i <= N ; i ++ ) cin >> coor [ i ][ 0 ] >> coor [ i ][ 1 ]; vector < vector < int > > connect ( N + 1 ); // d distance candidate for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = i + 1 ; j <= N ; j ++ ) { if (( coor [ i ][ 0 ] - coor [ j ][ 0 ]) * ( coor [ i ][ 0 ] - coor [ j ][ 0 ]) + ( coor [ i ][ 1 ] - coor [ j ][ 1 ]) * ( coor [ i ][ 1 ] - coor [ j ][ 1 ]) <= d * d ) { connect [ i ]. push_back ( j ); connect [ j ]. push_back ( i ); } } } char s ; int a , b ; while ( cin >> s ) { int a , b ; if ( s == 'O' ) { // Union cin >> a ; mem [ a ] = true ; for ( int i = 0 ; i < connect [ a ]. size (); i ++ ) { if ( mem [ connect [ a ][ i ]] == true ) unionSet ( a , connect [ a ][ i ]); } } else if ( s == 'S' ) { cin >> a >> b ; // Find if ( find ( a ) == find ( b )) cout << \"SUCCESS\" << endl ; else cout << \"FAIL\" << endl ; } } return 0 ; }","title":"2236 Wireless Work"},{"location":"POJ/2236WirelessWork/#2236-wireless-work","text":"\u8fd9\u4e5f\u662f\u4e00\u9053\u7ecf\u5178\u7684union find\u6a21\u7248\u9898\u76ee\u3002\u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\uff0c\u9996\u5148\u4fdd\u5b58\u4e00\u4e0b\u6bcf\u53f0\u7535\u8111\u80fd\u4ee5\u8ddd\u79bb d \u8fde\u63a5\u7684\u5907\u9009\uff1b\u7136\u540e\u5f00\u59cb\u5f00\u59cb\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316\u3001\u5408\u5e76\u3001\u67e5\u627e\u7b49\u64cd\u4f5c\u3002\u4e00\u65e6\u53d1\u73b0\uff0c\u88ab\u4fee\u590d\u7684\u67d0\u53f0\u7535\u8111\u7684 d \u8303\u56f4\u5185\u6709\u7535\u8111\u4e5f\u662f\u88ab\u4fee\u590d\uff0c\u90a3\u4e48\u5c31\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u3002 \u67e5\u770b\u65f6\u67e5\u770b\u4e24\u53f0\u7535\u8111\u662f\u5426\u662f\u540c\u4e00\u7956\u5148\u8282\u70b9\u5373\u53ef\u3002 vector < int > parent ; int find ( int idx ) { if ( parent [ idx ] == idx ) return idx ; return parent [ idx ] = find ( parent [ idx ]); } void unionSet ( int x , int y ) { int px = find ( x ); int py = find ( y ); if ( px == py ) return ; if ( px < py ) parent [ py ] = px ; else parent [ px ] = py ; return ; } int main () { int N , d ; cin >> N >> d ; vector < vector < int > > coor ( N + 1 , vector < int > ( 2 , 0 )); vector < bool > mem ( N + 1 , false ); parent . resize ( N + 1 , 0 ); // Initialization for ( int i = 1 ; i <= N ; i ++ ) parent [ i ] = i ; for ( int i = 1 ; i <= N ; i ++ ) cin >> coor [ i ][ 0 ] >> coor [ i ][ 1 ]; vector < vector < int > > connect ( N + 1 ); // d distance candidate for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = i + 1 ; j <= N ; j ++ ) { if (( coor [ i ][ 0 ] - coor [ j ][ 0 ]) * ( coor [ i ][ 0 ] - coor [ j ][ 0 ]) + ( coor [ i ][ 1 ] - coor [ j ][ 1 ]) * ( coor [ i ][ 1 ] - coor [ j ][ 1 ]) <= d * d ) { connect [ i ]. push_back ( j ); connect [ j ]. push_back ( i ); } } } char s ; int a , b ; while ( cin >> s ) { int a , b ; if ( s == 'O' ) { // Union cin >> a ; mem [ a ] = true ; for ( int i = 0 ; i < connect [ a ]. size (); i ++ ) { if ( mem [ connect [ a ][ i ]] == true ) unionSet ( a , connect [ a ][ i ]); } } else if ( s == 'S' ) { cin >> a >> b ; // Find if ( find ( a ) == find ( b )) cout << \"SUCCESS\" << endl ; else cout << \"FAIL\" << endl ; } } return 0 ; }","title":"2236 Wireless Work"},{"location":"POJ/3181DollarDayz/","text":"3181 Dollar Dayz # \u7ecf\u5178\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u4e5f\u662f\u4f7f\u7528 \u5b8c\u5168\u80cc\u5305\u6a21\u7248 \u6765\u5957\u7528\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e0e\u6a21\u7248\u6709\u7565\u5fae\u4e0d\u540c\uff08\u4e00\u4e2a\u662f\u6c42\u548c\uff0c\u4e00\u4e2a\u662f\u6c42\u6700\u5927\uff09\uff0c\u548c 2229 Sumsets \u7684\u8f6c\u79fb\u65b9\u7a0b\u51e0\u4e4e\u4e00\u6478\u4e00\u6837\u3002 \u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u5c31\u662f\u4f4d\u6570\u95ee\u9898\u3002long long \u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u4e3a 2^{63} -1 \\approx 10^{19} 2^{63} -1 \\approx 10^{19} \uff0c\u4f46\u662f\u8fd9\u91cc\u6700\u5927\u7ed3\u679c\uff0c N=1000,K=100 N=1000,K=100 \u65f6\u662f\u63a5\u8fd1 10^{33} 10^{33} \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2a long long \u6570\u7ec4\u53bb\u5b58\u50a8\u9ad8\u4f4d\u548c\u4f4e\u4f4d\uff0c\u5e76\u4e14\u540c\u65f6\u66f4\u65b0\u3002 int main () { int N , K ; long long mod = 1E18 ; cin >> N >> K ; vector < long long > lowdp ( N + 1 , 0 ); vector < long long > highdp ( N + 1 , 0 ); lowdp [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N - i ; j ++ ) { highdp [ j + i ] = ( highdp [ j + i ] + highdp [ j ]) + ( lowdp [ j + i ] + lowdp [ j ]) / mod ; lowdp [ j + i ] = ( lowdp [ j + i ] + lowdp [ j ]) % mod ; } } if ( highdp [ N ] > 0 ) cout << highdp [ N ]; cout << lowdp [ N ] << endl ; return 0 ; } \u590d\u6742\u5ea6\u5206\u6790 # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4f7f\u7528\u4e86\u4e24\u4e2a N N \u957f\u5ea6\u7684 long long \u6570\u7ec4\uff0c\u6240\u4ee5\u662f O(N) O(N) \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u548c\u6b63\u5e38\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u4e3a O(NK) O(NK)","title":"3181 Dollar Dayz"},{"location":"POJ/3181DollarDayz/#3181-dollar-dayz","text":"\u7ecf\u5178\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u4e5f\u662f\u4f7f\u7528 \u5b8c\u5168\u80cc\u5305\u6a21\u7248 \u6765\u5957\u7528\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e0e\u6a21\u7248\u6709\u7565\u5fae\u4e0d\u540c\uff08\u4e00\u4e2a\u662f\u6c42\u548c\uff0c\u4e00\u4e2a\u662f\u6c42\u6700\u5927\uff09\uff0c\u548c 2229 Sumsets \u7684\u8f6c\u79fb\u65b9\u7a0b\u51e0\u4e4e\u4e00\u6478\u4e00\u6837\u3002 \u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u5c31\u662f\u4f4d\u6570\u95ee\u9898\u3002long long \u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u4e3a 2^{63} -1 \\approx 10^{19} 2^{63} -1 \\approx 10^{19} \uff0c\u4f46\u662f\u8fd9\u91cc\u6700\u5927\u7ed3\u679c\uff0c N=1000,K=100 N=1000,K=100 \u65f6\u662f\u63a5\u8fd1 10^{33} 10^{33} \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2a long long \u6570\u7ec4\u53bb\u5b58\u50a8\u9ad8\u4f4d\u548c\u4f4e\u4f4d\uff0c\u5e76\u4e14\u540c\u65f6\u66f4\u65b0\u3002 int main () { int N , K ; long long mod = 1E18 ; cin >> N >> K ; vector < long long > lowdp ( N + 1 , 0 ); vector < long long > highdp ( N + 1 , 0 ); lowdp [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N - i ; j ++ ) { highdp [ j + i ] = ( highdp [ j + i ] + highdp [ j ]) + ( lowdp [ j + i ] + lowdp [ j ]) / mod ; lowdp [ j + i ] = ( lowdp [ j + i ] + lowdp [ j ]) % mod ; } } if ( highdp [ N ] > 0 ) cout << highdp [ N ]; cout << lowdp [ N ] << endl ; return 0 ; }","title":"3181 Dollar Dayz"},{"location":"POJ/3181DollarDayz/#_1","text":"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4f7f\u7528\u4e86\u4e24\u4e2a N N \u957f\u5ea6\u7684 long long \u6570\u7ec4\uff0c\u6240\u4ee5\u662f O(N) O(N) \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u548c\u6b63\u5e38\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u4e3a O(NK) O(NK)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"POJ/3624CharmBracelet/","text":"3624 Charm Bracelet # \u57fa\u7840 0-1 \u80cc\u5305\u9898\u76ee\uff0c\u6309\u7167 0-1 \u80cc\u5305\u6a21\u7248\u6765\u5373\u53ef\u3002 int main () { int N , W ; cin >> N >> W ; vector < int > w ( N , 0 ); vector < int > v ( N , 0 ); vector < int > dp ( W , 0 ); for ( int i = 0 ; i < N ; i ++ ) cin >> w [ i ] >> v [ i ]; for ( int i = 0 ; i < N ; i ++ ) for ( int j = W ; j >= w [ i ]; j -- ) dp [ j ] = max ( dp [ j ], dp [ j - w [ i ]] + v [ i ]); cout << dp [ W ] << endl ; return 0 ; } \u590d\u6742\u5ea6\u5206\u6790 # \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u679a\u4e3e\u6bcf\u4e2a\u7269\u54c1\uff0c\u679a\u4e3e\u6240\u6709\u80cc\u5305\u5bb9\u91cf O(NW) O(NW) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7528\u4e86\u4e00\u7ef4\u6570\u7ec4\uff0c O(W) O(W)","title":"3624 Charm Bracelet"},{"location":"POJ/3624CharmBracelet/#3624-charm-bracelet","text":"\u57fa\u7840 0-1 \u80cc\u5305\u9898\u76ee\uff0c\u6309\u7167 0-1 \u80cc\u5305\u6a21\u7248\u6765\u5373\u53ef\u3002 int main () { int N , W ; cin >> N >> W ; vector < int > w ( N , 0 ); vector < int > v ( N , 0 ); vector < int > dp ( W , 0 ); for ( int i = 0 ; i < N ; i ++ ) cin >> w [ i ] >> v [ i ]; for ( int i = 0 ; i < N ; i ++ ) for ( int j = W ; j >= w [ i ]; j -- ) dp [ j ] = max ( dp [ j ], dp [ j - w [ i ]] + v [ i ]); cout << dp [ W ] << endl ; return 0 ; }","title":"3624 Charm Bracelet"},{"location":"POJ/3624CharmBracelet/#_1","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u679a\u4e3e\u6bcf\u4e2a\u7269\u54c1\uff0c\u679a\u4e3e\u6240\u6709\u80cc\u5305\u5bb9\u91cf O(NW) O(NW) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7528\u4e86\u4e00\u7ef4\u6570\u7ec4\uff0c O(W) O(W)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"POJ/POJ/","text":"This is the POJ problem directory","title":"POJ"},{"location":"PY/PYIntro/","text":"Python # Python\u4e13\u9898 \u57fa\u7840\u6570\u636e\u7ed3\u6784 # List - generalized container Tuples - containers (immutable) Dictionary Set \u200b set \u652f\u6301 &\uff0c^\uff0c\uff5c\u7684\u96c6\u5408\u64cd\u4f5c \u5f15\u7528\u8ba1\u6570\u6cd5 Reference counting # Python \u8bed\u8a00\u9ed8\u8ba4\u91c7\u7528\u7684\u5783\u573e\u6536\u96c6\u673a\u5236\u662f\u300e\u5f15\u7528\u8ba1\u6570\u6cd5 Reference Counting\u300f python\u91cc\u6bcf\u4e00\u4e2a\u4e1c\u897f\u90fd\u662f\u5bf9\u8c61\uff0c\u5b83\u4eec\u7684\u6838\u5fc3\u5c31\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1aPyObject typedef struct_object { int ob_refcnt ; struct_typeobject * ob_type ; } PyObject ; \u7531\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u6765\u7ef4\u62a4\u996e\u7528\u4e2a\u6570 \u9519\u8bef\u673a\u5236 # def some_function (): try : 10 / 0 except ZeroDivisionError : print ( \"Oops, invalid\" ) else : pass finally : print ( \"We're done with that\" ) Generator # Just-in-time memory efficient containers Produces a stream of on-demand values Only executes on next() yield() produces a value, but saves the function\u2019s state for later Consumable (use once-only) def generate_ints ( N ): for i in range ( N ): yield i x = generate_ints ( 3 ) next ( x ) # 0 next ( x ) # 1 next ( x ) # 2 def pi_series (): # infinite series converges to pi sm = 0 i = 1.0 ; j = 1 while True : # loops forever! sm = sm + j / i yield 4 * sm i = i + 2 ; j = j * - 1","title":"Python"},{"location":"PY/PYIntro/#python","text":"Python\u4e13\u9898","title":"Python"},{"location":"PY/PYIntro/#_1","text":"List - generalized container Tuples - containers (immutable) Dictionary Set \u200b set \u652f\u6301 &\uff0c^\uff0c\uff5c\u7684\u96c6\u5408\u64cd\u4f5c","title":"\u57fa\u7840\u6570\u636e\u7ed3\u6784"},{"location":"PY/PYIntro/#reference-counting","text":"Python \u8bed\u8a00\u9ed8\u8ba4\u91c7\u7528\u7684\u5783\u573e\u6536\u96c6\u673a\u5236\u662f\u300e\u5f15\u7528\u8ba1\u6570\u6cd5 Reference Counting\u300f python\u91cc\u6bcf\u4e00\u4e2a\u4e1c\u897f\u90fd\u662f\u5bf9\u8c61\uff0c\u5b83\u4eec\u7684\u6838\u5fc3\u5c31\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff1aPyObject typedef struct_object { int ob_refcnt ; struct_typeobject * ob_type ; } PyObject ; \u7531\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u6765\u7ef4\u62a4\u996e\u7528\u4e2a\u6570","title":"\u5f15\u7528\u8ba1\u6570\u6cd5 Reference counting"},{"location":"PY/PYIntro/#_2","text":"def some_function (): try : 10 / 0 except ZeroDivisionError : print ( \"Oops, invalid\" ) else : pass finally : print ( \"We're done with that\" )","title":"\u9519\u8bef\u673a\u5236"},{"location":"PY/PYIntro/#generator","text":"Just-in-time memory efficient containers Produces a stream of on-demand values Only executes on next() yield() produces a value, but saves the function\u2019s state for later Consumable (use once-only) def generate_ints ( N ): for i in range ( N ): yield i x = generate_ints ( 3 ) next ( x ) # 0 next ( x ) # 1 next ( x ) # 2 def pi_series (): # infinite series converges to pi sm = 0 i = 1.0 ; j = 1 while True : # loops forever! sm = sm + j / i yield 4 * sm i = i + 2 ; j = j * - 1","title":"Generator"},{"location":"PY/numpy/","text":"","title":"Numpy"},{"location":"PY/pandas/","text":"","title":"Pandas"}]}